import React, { useState, useMemo } from 'react';

// --- Helper Components ---

// Icon Components (inline SVG for simplicity)
const ChartBarIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-3"><path d="M12 20V10M18 20V4M6 20V16"/></svg>;
const InfoIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-3"><path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z"/><path d="M12 16v-4"/><path d="M12 8h.01"/></svg>;
const FileTextIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-3"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><line x1="16" y1="13" x2="8" y2="13"/><line x1="16" y1="17" x2="8" y2="17"/><line x1="10" y1="9" x2="8" y2="9"/></svg>;
const UploadIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-3"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" y1="3" x2="12" y2="15"/></svg>;
const MenuIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16m-7 6h7" /></svg>;

// --- Main Components ---

const Sidebar = ({ setView, isNavOpen, setNavOpen }) => {
    const navClass = isNavOpen ? 'translate-x-0' : '-translate-x-full';
    
    const handleLinkClick = (view) => {
        setView(view);
        if (window.innerWidth < 1024) { // Close nav on mobile after click
            setNavOpen(false);
        }
    };

    return (
        <aside className={`fixed top-0 left-0 h-full w-64 bg-slate-800 text-white p-6 overflow-y-auto z-40 lg:translate-x-0 transition-transform duration-300 ease-in-out ${navClass}`}>
            <div className="mb-10 text-center">
                <h1 className="text-2xl font-bold">CoPsoQ <span className="text-fuchsia-400">psqcat</span></h1>
                <p className="text-sm text-slate-400">Generador de Informes</p>
            </div>
            <nav>
                <ul className="space-y-2">
                    <li><a href="#dashboard" onClick={() => handleLinkClick('dashboard')} className="flex items-center p-2 rounded-md hover:bg-slate-700 transition-colors"><ChartBarIcon />Dashboard</a></li>
                    <li><a href="#data-input" onClick={() => handleLinkClick('data-input')} className="flex items-center p-2 rounded-md hover:bg-slate-700 transition-colors"><UploadIcon />Introducir Datos</a></li>
                    <li><a href="#report" onClick={() => handleLinkClick('report')} className="flex items-center p-2 rounded-md hover:bg-slate-700 transition-colors"><FileTextIcon />Informe Detallado</a></li>
                    <li><a href="#info" onClick={() => handleLinkClick('info')} className="flex items-center p-2 rounded-md hover:bg-slate-700 transition-colors"><InfoIcon />Acerca de</a></li>
                </ul>
            </nav>
        </aside>
    );
};

const DataInput = ({ setSurveyData }) => {
    const [jsonInput, setJsonInput] = useState('');
    const [error, setError] = useState('');

    const sampleData = {
        "metadata": {
            "company": "IDIAP 2024",
            "date": "14 de noviembre de 2024",
            "participants": 93,
            "totalSurveyed": 93
        },
        "demographics": {
            "gender": [{ "label": "Mujeres", "value": 64.5 }, { "label": "Hombres", "value": 35.5 }],
            "age": [{ "label": "< 31 años", "value": 40.9 }, { "label": "31-45 años", "value": 40.9 }, { "label": "> 45 años", "value": 18.3 }]
        },
        "dimensions": [
            { "name": "Ritmo de trabajo", "unfavorable": 74.7, "intermediate": 19.5, "favorable": 5.7 },
            { "name": "Inseg. condiciones", "unfavorable": 52.9, "intermediate": 19.5, "favorable": 27.6 },
            { "name": "Exig. cuantitativas", "unfavorable": 50.6, "intermediate": 34.5, "favorable": 14.9 },
            { "name": "Claridad de rol", "unfavorable": 50.6, "intermediate": 26.4, "favorable": 23.0 },
            { "name": "Previsibilidad", "unfavorable": 50.6, "intermediate": 29.9, "favorable": 19.5 },
            { "name": "Exig. emocionales", "unfavorable": 48.3, "intermediate": 24.1, "favorable": 27.6 },
            { "name": "Doble presencia", "unfavorable": 36.8, "intermediate": 35.6, "favorable": 27.6 },
            { "name": "Reconocimiento", "unfavorable": 3.4, "intermediate": 12.6, "favorable": 83.9 },
            { "name": "Confianza vertical", "unfavorable": 4.6, "intermediate": 9.2, "favorable": 86.2 }
        ]
    };

    const handleGenerate = () => {
        try {
            setError('');
            const parsedData = JSON.parse(jsonInput);
            // Basic validation
            if (!parsedData.metadata || !parsedData.dimensions) {
                throw new Error("El formato del JSON es inválido. Faltan las claves 'metadata' o 'dimensions'.");
            }
            setSurveyData(parsedData);
            alert('¡Dashboard generado con éxito!');
        } catch (e) {
            setError(`Error al procesar los datos: ${e.message}. Por favor, verifica el formato del JSON.`);
            setSurveyData(null);
        }
    };
    
    const loadSampleData = () => {
        setJsonInput(JSON.stringify(sampleData, null, 2));
        setError('');
    };

    return (
        <div className="card">
            <h2 className="text-2xl font-bold mb-4 text-slate-800">Introducir Datos de la Encuesta</h2>
            <p className="mb-4 text-slate-600">Pega el contenido de tu archivo de datos PSQCAT en formato JSON en el siguiente campo. Luego, haz clic en "Generar Dashboard".</p>
            
            <div className="mb-4">
                <label htmlFor="json-input" className="block text-sm font-medium text-slate-700 mb-1">Datos JSON:</label>
                <textarea
                    id="json-input"
                    className="w-full h-64 p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-fuchsia-500 focus:border-fuchsia-500 transition"
                    value={jsonInput}
                    onChange={(e) => setJsonInput(e.target.value)}
                    placeholder='Pega aquí tus datos en formato JSON...'
                ></textarea>
            </div>
            {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md relative mb-4" role="alert">{error}</div>}
            <div className="flex flex-wrap gap-4">
                <button onClick={handleGenerate} className="bg-fuchsia-600 text-white font-bold py-2 px-4 rounded-md hover:bg-fuchsia-700 transition-colors">
                    Generar Dashboard
                </button>
                 <button onClick={loadSampleData} className="bg-slate-500 text-white font-bold py-2 px-4 rounded-md hover:bg-slate-600 transition-colors">
                    Cargar Datos de Ejemplo
                </button>
            </div>
        </div>
    );
};

const Dashboard = ({ data }) => {
    // Memoize derived data to avoid re-computation on every render
    const topRisks = useMemo(() => {
        if (!data) return [];
        return [...data.dimensions]
            .sort((a, b) => b.unfavorable - a.unfavorable)
            .slice(0, 5);
    }, [data]);

    const mainRisk = useMemo(() => {
        if (!topRisks || topRisks.length === 0) return null;
        return topRisks[0];
    }, [topRisks]);

    const mostFavorable = useMemo(() => {
        if (!data) return null;
        return [...data.dimensions].sort((a, b) => b.favorable - a.favorable)[0];
    }, [data]);

    if (!data) {
        return (
            <div className="card text-center">
                <h2 className="text-2xl font-bold text-slate-800">Bienvenido</h2>
                <p className="mt-2 text-slate-600">No se han cargado datos. Por favor, ve a la sección "Introducir Datos" para generar tu dashboard.</p>
            </div>
        );
    }
    
    const responseRate = (data.metadata.participants / data.metadata.totalSurveyed) * 100;

    // Chart.js setup would go here, but we'll render placeholders
    // In a real app, you'd pass this data to a Chart component
    const topRisksChartData = {
        labels: topRisks.map(r => r.name),
        values: topRisks.map(r => r.unfavorable)
    };
    
    const mainRiskChartData = mainRisk ? {
        values: [mainRisk.unfavorable, mainRisk.intermediate, mainRisk.favorable]
    } : { values: [] };

    return (
        <div>
            {/* KPI Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                <div className="card">
                    <p className="text-sm text-slate-500">Tasa de Respuesta</p>
                    <p className="text-2xl font-bold text-slate-800">{responseRate.toFixed(1)}%</p>
                </div>
                <div className="card">
                    <p className="text-sm text-slate-500">Principal Riesgo</p>
                    <p className="text-xl font-bold text-slate-800">{mainRisk?.name} ({mainRisk?.unfavorable}%)</p>
                </div>
                <div className="card">
                    <p className="text-sm text-slate-500">Dimensión más Favorable</p>
                    <p className="text-xl font-bold text-slate-800">{mostFavorable?.name} ({mostFavorable?.favorable}%)</p>
                </div>
            </div>

            {/* Charts Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-5 gap-6 mb-8">
                <div className="lg:col-span-3 card">
                    <h3 className="text-lg font-semibold mb-4">Top 5 Riesgos (% Exposición Desfavorable)</h3>
                    {/* Placeholder for chart */}
                    <div className="bg-slate-100 p-4 rounded-md text-center">Gráfico de barras aquí (requiere Chart.js)</div>
                    <pre className="mt-2 text-xs bg-slate-50 p-2 rounded overflow-x-auto">{JSON.stringify(topRisksChartData, null, 2)}</pre>
                </div>
                <div className="lg:col-span-2 card">
                    <h3 className="text-lg font-semibold mb-4">Desglose: {mainRisk?.name}</h3>
                    {/* Placeholder for chart */}
                    <div className="bg-slate-100 p-4 rounded-md text-center">Gráfico de dona aquí (requiere Chart.js)</div>
                    <pre className="mt-2 text-xs bg-slate-50 p-2 rounded overflow-x-auto">{JSON.stringify(mainRiskChartData, null, 2)}</pre>
                </div>
            </div>
        </div>
    );
};

const Report = ({ data }) => {
    if (!data) {
        return (
            <div className="card text-center">
                <p className="mt-2 text-slate-600">Carga datos para ver el informe detallado.</p>
            </div>
        );
    }
    return (
        <div className="card">
            <h2 className="text-2xl font-bold mb-4 text-slate-800">Informe Detallado de {data.metadata.company}</h2>
            <div className="space-y-6">
                <section>
                    <h3 className="text-xl font-semibold mb-2 border-b pb-2">1. Introducción</h3>
                    <p>Los factores de riesgo psicosociales son aquellas características de las condiciones de trabajo... Este informe utiliza la metodología CoPsoQ-PSQCAT para identificar, localizar y valorar la exposición a dichos riesgos.</p>
                </section>
                <section>
                    <h3 className="text-xl font-semibold mb-2 border-b pb-2">2. Metodología</h3>
                    <p>El método CoPsoQ-PSQCAT es la adaptación a Catalunya del Copenhagen Psychosocial Questionnaire, un instrumento de referencia internacional orientado a la prevención...</p>
                </section>
                 <section>
                    <h3 className="text-xl font-semibold mb-2 border-b pb-2">3. Resultados Principales</h3>
                    <p>La tasa de respuesta global fue del <span className="font-bold">{(data.metadata.participants / data.metadata.totalSurveyed * 100).toFixed(1)}%</span>. A continuación se presentan los resultados por dimensión.</p>
                    <ul className="list-disc list-inside mt-4 space-y-2">
                        {data.dimensions.map(dim => (
                            <li key={dim.name}>
                                <span className="font-semibold">{dim.name}:</span> Desfavorable: {dim.unfavorable}%, Intermedia: {dim.intermediate}%, Favorable: {dim.favorable}%
                            </li>
                        ))}
                    </ul>
                </section>
            </div>
        </div>
    );
};

const Info = () => (
    <div className="card">
        <h2 className="text-2xl font-bold mb-4 text-slate-800">Acerca de esta Herramienta</h2>
        <p className="mb-4">Este generador de informes automatizado ha sido creado para visualizar los datos de la encuesta de riesgos psicosociales CoPsoQ-PSQCAT de una manera más dinámica e interactiva.</p>
        <h3 className="text-lg font-semibold mb-2">Cómo usarla:</h3>
        <ol className="list-decimal list-inside space-y-2">
            <li>Obtén los datos de tu encuesta en formato JSON.</li>
            <li>Ve a la sección "Introducir Datos".</li>
            <li>Pega el contenido JSON en el área de texto.</li>
            <li>Haz clic en "Generar Dashboard".</li>
            <li>Explora los resultados en la sección "Dashboard" y el "Informe Detallado".</li>
        </ol>
         <h3 className="text-lg font-semibold mt-4 mb-2">Formato JSON esperado:</h3>
        <pre className="bg-slate-100 p-4 rounded-md text-xs overflow-x-auto">
            {`
{
  "metadata": {
    "company": "Nombre Empresa",
    "date": "Fecha del Informe",
    "participants": 93,
    "totalSurveyed": 93
  },
  "demographics": { ... },
  "dimensions": [
    { 
      "name": "Nombre Dimensión", 
      "unfavorable": 74.7, 
      "intermediate": 19.5, 
      "favorable": 5.7 
    },
    ...
  ]
}
            `}
        </pre>
    </div>
);


export default function App() {
    const [view, setView] = useState('dashboard');
    const [surveyData, setSurveyData] = useState(null);
    const [isNavOpen, setNavOpen] = useState(false);

    const renderView = () => {
        switch (view) {
            case 'dashboard':
                return <Dashboard data={surveyData} />;
            case 'data-input':
                return <DataInput setSurveyData={setSurveyData} />;
            case 'report':
                return <Report data={surveyData} />;
            case 'info':
                 return <Info />;
            default:
                return <Dashboard data={surveyData} />;
        }
    };

    return (
        <div className="bg-slate-100 min-h-screen">
            <Sidebar setView={setView} isNavOpen={isNavOpen} setNavOpen={setNavOpen} />
            
            <button onClick={() => setNavOpen(!isNavOpen)} className="lg:hidden fixed top-4 left-4 z-50 bg-white p-2 rounded-md shadow-lg">
                <MenuIcon />
            </button>

            <main className="lg:ml-64 p-6 md:p-8">
                <header className="mb-8">
                    <h1 className="text-3xl font-bold text-slate-800">Dashboard de Riesgos Psicosociales</h1>
                    <p className="text-lg text-slate-500 mt-1">{surveyData ? surveyData.metadata.company : 'IDIAP 2024'}</p>
                </header>
                {renderView()}
            </main>
        </div>
    );
}
